{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/brickbolt/React/bricknbolt/updated/foundation-react-ui/src/pages/_document.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\nthis file is always supposed to be a .jsx file converting it to .tsx will break aphrodite!  -pranjalk 2019-12-19\n*/\n\n/* eslint-disable react/no-danger */\n\n/* eslint-disable @typescript-eslint/require-await */\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport React from 'react';\nimport Document, { Head, Main, NextScript } from 'next/document';\nimport { StyleSheetServer } from 'aphrodite';\nexport default class MyDocument extends Document {\n  static async getInitialProps({\n    renderPage\n  }) {\n    const {\n      html,\n      css\n    } = StyleSheetServer.renderStatic(() => renderPage());\n    const ids = css.renderedClassNames;\n    return _objectSpread({}, html, {\n      css,\n      ids\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    /* Take the renderedClassNames from aphrodite (as generated\n        in getInitialProps) and assign them to __NEXT_DATA__ so that they\n        are accessible to the client for rehydration.\n    */\n\n    const {\n      __NEXT_DATA__,\n      ids\n    } = props;\n\n    if (ids) {\n      __NEXT_DATA__.ids = this.props.ids;\n    }\n  }\n\n  render() {\n    /* Make sure to use data-aphrodite attribute in the style tag here\n        so that aphrodite knows which style tag it's in control of when\n        the client goes to render styles. If you don't you'll get a second\n        <style> tag\n    */\n    return __jsx(\"html\", {\n      lang: \"en-IN\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, __jsx(Head, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, __jsx(\"style\", {\n      \"data-aphrodite\": true,\n      dangerouslySetInnerHTML: {\n        __html: this.props.css.content\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    })), __jsx(\"body\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, __jsx(Main, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), __jsx(NextScript, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/brickbolt/React/bricknbolt/updated/foundation-react-ui/src/pages/_document.jsx"],"names":["React","Document","Head","Main","NextScript","StyleSheetServer","MyDocument","getInitialProps","renderPage","html","css","renderStatic","ids","renderedClassNames","constructor","props","__NEXT_DATA__","render","__html","content"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AAIA;;AACA;;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,IAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,eAAjD;AACA,SAASC,gBAAT,QAAiC,WAAjC;AAEA,eAAe,MAAMC,UAAN,SAAyBL,QAAzB,CAAkC;AAC7C,eAAaM,eAAb,CAA6B;AAAEC,IAAAA;AAAF,GAA7B,EAA6C;AACzC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAgBL,gBAAgB,CAACM,YAAjB,CAA8B,MAAMH,UAAU,EAA9C,CAAtB;AACA,UAAMI,GAAG,GAAGF,GAAG,CAACG,kBAAhB;AACA,6BAAYJ,IAAZ;AAAkBC,MAAAA,GAAlB;AAAuBE,MAAAA;AAAvB;AACH;;AAEDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA;;;;;AAIA,UAAM;AAAEC,MAAAA,aAAF;AAAiBJ,MAAAA;AAAjB,QAAyBG,KAA/B;;AACA,QAAIH,GAAJ,EAAS;AACLI,MAAAA,aAAa,CAACJ,GAAd,GAAoB,KAAKG,KAAL,CAAWH,GAA/B;AACH;AACJ;;AAEDK,EAAAA,MAAM,GAAG;AACL;;;;;AAKA,WACI;AAAM,MAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,4BADJ;AAEI,MAAA,uBAAuB,EAAE;AAAEC,QAAAA,MAAM,EAAE,KAAKH,KAAL,CAAWL,GAAX,CAAeS;AAAzB,OAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAPJ,CADJ;AAcH;;AAvC4C","sourcesContent":["/*\nthis file is always supposed to be a .jsx file converting it to .tsx will break aphrodite!  -pranjalk 2019-12-19\n*/\n\n/* eslint-disable react/no-danger */\n/* eslint-disable @typescript-eslint/require-await */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport React from 'react';\nimport Document, { Head, Main, NextScript } from 'next/document';\nimport { StyleSheetServer } from 'aphrodite';\n\nexport default class MyDocument extends Document {\n    static async getInitialProps({ renderPage }) {\n        const { html, css } = StyleSheetServer.renderStatic(() => renderPage());\n        const ids = css.renderedClassNames;\n        return { ...html, css, ids };\n    }\n\n    constructor(props) {\n        super(props);\n        /* Take the renderedClassNames from aphrodite (as generated\n            in getInitialProps) and assign them to __NEXT_DATA__ so that they\n            are accessible to the client for rehydration.\n        */\n        const { __NEXT_DATA__, ids } = props;\n        if (ids) {\n            __NEXT_DATA__.ids = this.props.ids;\n        }\n    }\n\n    render() {\n        /* Make sure to use data-aphrodite attribute in the style tag here\n            so that aphrodite knows which style tag it's in control of when\n            the client goes to render styles. If you don't you'll get a second\n            <style> tag\n        */\n        return (\n            <html lang=\"en-IN\">\n                <Head>\n                    <style\n                        data-aphrodite\n                        dangerouslySetInnerHTML={{ __html: this.props.css.content }}\n                    />\n                </Head>\n                <body>\n                    <Main />\n                    <NextScript />\n                </body>\n            </html>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}