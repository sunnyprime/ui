{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport has from 'lodash/has';\nimport get from 'lodash/get';\nimport { captureException } from '@sentry/browser';\nimport { HTTP_OK, HTTP_NOT_FOUND } from '../../common/constants/httpStatusCodes';\nexport default function apiMiddleware() {\n  return next => action => {\n    const defaultTransformKey = 'data';\n    const defaultTransformParams = {};\n\n    const {\n      promise,\n      type,\n      transformer,\n      transformKey,\n      transformParams,\n      onAPISuccess = x => x,\n      onAPIFailure = x => x\n    } = action,\n          rest = _objectWithoutProperties(action, [\"promise\", \"type\", \"transformer\", \"transformKey\", \"transformParams\", \"onAPISuccess\", \"onAPIFailure\"]); // eslint-disable-next-line @typescript-eslint/no-misused-promises\n\n\n    if (!promise) return next(action);\n\n    if (!transformer || typeof transformer !== 'function') {\n      throw new Error(`transformer function is required with api middleware.\n        Use function: x => x if no transformer function exists.`);\n    }\n\n    const SUCCESS = type;\n    const REQUEST = `${type}_REQUEST`;\n    const FAILURE = `${type}_FAILURE`;\n    const FINALLY = `${type}_FINALLY`;\n    next(_objectSpread({}, rest, {\n      type: REQUEST\n    }));\n    return promise.then(res => {\n      const keyToTransform = transformKey || defaultTransformKey;\n      const paramsToTransformer = transformParams || defaultTransformParams;\n\n      if (!_Array$isArray(res) && !has(res, keyToTransform)) {\n        throw new Error('transformKey not found in response.');\n      }\n\n      const dataToTransform = _Array$isArray(res) ? res : get(res, keyToTransform);\n      const transformed = transformer(dataToTransform, paramsToTransformer);\n      onAPISuccess({\n        action,\n        transformed,\n        response: res\n      });\n      next(_objectSpread({}, rest, {\n        status: HTTP_OK,\n        transformed,\n        type: SUCCESS\n      }));\n    }).catch(error => {\n      const errorResponse = error.response || {};\n      const status = errorResponse.status || 'ERROR';\n\n      if (status > HTTP_NOT_FOUND) {\n        captureException(error);\n      }\n\n      onAPIFailure({\n        action,\n        error\n      });\n      next(_objectSpread({}, rest, {\n        errorData: errorResponse.data,\n        status,\n        type: FAILURE\n      }));\n    }).finally(() => {\n      next(_objectSpread({}, rest, {\n        type: FINALLY\n      }));\n    });\n  };\n} // reference for Symbol implementation: https://github.com/reactjs/redux/blob/master/examples/real-world/src/middleware/api.js","map":{"version":3,"sources":["/Users/brickbolt/React/bricknbolt/updated/foundation-react-ui/src/js/redux/middlewares/apiPromiseHandler.ts"],"names":["has","get","captureException","HTTP_OK","HTTP_NOT_FOUND","apiMiddleware","next","action","defaultTransformKey","defaultTransformParams","promise","type","transformer","transformKey","transformParams","onAPISuccess","x","onAPIFailure","rest","Error","SUCCESS","REQUEST","FAILURE","FINALLY","then","res","keyToTransform","paramsToTransformer","dataToTransform","transformed","response","status","catch","error","errorResponse","errorData","data","finally"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport has from 'lodash/has';\nimport get from 'lodash/get';\nimport { AxiosPromise } from 'axios';\nimport { captureException } from '@sentry/browser';\nimport { HTTP_OK, HTTP_NOT_FOUND } from '../../common/constants/httpStatusCodes';\n\ninterface ApiPromiseMiddlewareActioInterface {\n    type: string;\n    promise: Promise<AxiosPromise>;\n    transformer: any;\n    transformKey: string;\n    transformParams: string;\n    onAPISuccess: any;\n    onAPIFailure: any;\n}\n\nexport default function apiMiddleware() {\n    return (next) => (action: ApiPromiseMiddlewareActioInterface): Promise<AxiosPromise> | void | Promise<void> => {\n        const defaultTransformKey = 'data';\n        const defaultTransformParams = {};\n        const {\n            promise,\n            type,\n            transformer,\n            transformKey,\n            transformParams,\n            onAPISuccess = (x: any) => x,\n            onAPIFailure = (x: any) => x,\n            ...rest\n        } = action;\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        if (!promise) return next(action);\n        if (!transformer || typeof transformer !== 'function') {\n            throw new Error(`transformer function is required with api middleware.\n        Use function: x => x if no transformer function exists.`);\n        }\n\n        const SUCCESS = type;\n        const REQUEST = `${type}_REQUEST`;\n        const FAILURE = `${type}_FAILURE`;\n        const FINALLY = `${type}_FINALLY`;\n        next({ ...rest, type: REQUEST });\n        return promise\n            .then((res) => {\n                const keyToTransform = transformKey || defaultTransformKey;\n                const paramsToTransformer = transformParams || defaultTransformParams;\n                if (!Array.isArray(res) && !has(res, keyToTransform)) {\n                    throw new Error('transformKey not found in response.');\n                }\n                const dataToTransform = Array.isArray(res) ? res : get(res, keyToTransform);\n                const transformed = transformer(dataToTransform, paramsToTransformer);\n                onAPISuccess({ action, transformed, response: res });\n                next({\n                    ...rest, status: HTTP_OK, transformed, type: SUCCESS,\n                });\n            })\n            .catch((error: any) => {\n                const errorResponse = error.response || {};\n                const status = errorResponse.status || 'ERROR';\n                if (status > HTTP_NOT_FOUND) {\n                    captureException(error);\n                }\n                onAPIFailure({ action, error });\n                next({\n                    ...rest, errorData: errorResponse.data, status, type: FAILURE,\n                });\n            })\n            .finally(() => {\n                next({ ...rest, type: FINALLY });\n            });\n    };\n}\n\n// reference for Symbol implementation: https://github.com/reactjs/redux/blob/master/examples/real-world/src/middleware/api.js\n"]},"metadata":{},"sourceType":"module"}